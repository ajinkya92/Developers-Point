//
//  DataService.swift
//  Developers Point
//
//  Created by Ajinkya Sonar on 04/10/18.
//  Copyright Â© 2018 Ajinkya Sonar. All rights reserved.
//

import Foundation
import Firebase

class DataService {
    static let instance = DataService()
    
    private var _REF_BASE = DB_BASE
    private var _REF_USERS = DB_BASE.child("users")
    private var _REF_Groups = DB_BASE.child("groups")
    private var _REF_FEED = DB_BASE.child("feed")
    
    var REF_BASE: DatabaseReference {
        return _REF_BASE
    }
    
    var REF_USERS: DatabaseReference {
        return _REF_USERS
    }
    
    var REF_GROUPS: DatabaseReference {
        return _REF_Groups
    }
    
    var REF_FEED: DatabaseReference {
        return _REF_FEED
    }
    
    
    func createDBUSer(uid: String, userData: Dictionary<String, Any>) {
        
        REF_USERS.child(uid).updateChildValues(userData)
        
    }
    
    //Function that converts the Uid of an user to the user name
    
    func getUsername(forUid uid: String, completion: @escaping uidToUsernameCompletionHandler) {
        
        REF_USERS.observeSingleEvent(of: .value) { (userSnapshot) in
            
            guard let userSnapshot = userSnapshot.children.allObjects as? [DataSnapshot] else {return}
            
            for user in userSnapshot {
                
                if user.key == uid {
                    completion(user.childSnapshot(forPath: "email").value as! String)
                }
                
            }
            
            
        }
        
    }
    
    // Creating Message with auto id generated by firebase and checking for the key
    
    func uploadPost(withMessage message: String, forUid uid: String, withGroupKey groupKey: String?, sendCompletion: @escaping postSomethingCompleteHandler) {
        
        if groupKey != nil {
            //send to groups ref
        } else {
            REF_FEED.childByAutoId().updateChildValues(["context": message, "senderId": uid])
            sendCompletion(true)
        }
        
    }
    
    func getAllMessages(completion: @escaping getAllFeedMessagesCompletionHandler) {
        
        var messageArray = [Message]()
        
        REF_FEED.observeSingleEvent(of: .value) { (feedMessageSnapshot) in
            
            guard let feedMessageSnapshot = feedMessageSnapshot.children.allObjects as? [DataSnapshot] else {return}
            
            for message in feedMessageSnapshot {
                
                let content = message.childSnapshot(forPath: "context").value as! String
                let senderId = message.childSnapshot(forPath: "senderId").value as! String
                let message = Message(content: content, senderId: senderId)
                messageArray.append(message)
            }
            
            completion(messageArray)
            
        }
        
    }
    
    
}
